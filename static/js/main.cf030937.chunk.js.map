{"version":3,"sources":["components/DetailedCard.tsx","components/CardGrid.tsx","components/ThemeSwitch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DetailedCard","props","console","log","this","className","onClick","window","location","href","path","handle","followerCount","React","Component","SAMPLE_CARDS","site","CardGrid","state","cards","GitHub","getUser","listFollowers","then","gitHubDetails","data","length","setState","map","card","ThemeSwitch","document","getElementsByTagName","classList","toggle","getElementsByClassName","type","toggleLightTheme","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kUAIqBA,G,wDACjB,WAAYC,GAAQ,uCACVA,G,qDAGA,IAAD,OAGL,OAFAC,QAAQC,IAAIC,KAAKH,OAGb,yBAAKI,UAAU,gBAAgBC,QAAS,kBAAMC,OAAOC,SAASC,KAAO,EAAKR,MAAMS,OAC5E,yBAAKL,UAAU,UAAf,IACMD,KAAKH,MAAMU,QAEjB,yBAAKN,UAAU,kBACVD,KAAKH,MAAMW,eAEhB,yBAAKP,UAAU,kBAAf,aAGA,yBAAKA,UAAU,UAAf,mB,GAnB0BQ,IAAMC,Y,iBCE1CC,G,MAAe,CACjB,CACIC,KAAM,WACNN,KAAM,eACNC,OAAQ,OACRC,cAAe,KAEnB,CACII,KAAM,WACNN,KAAM,eACNC,OAAQ,OACRC,cAAe,KAEnB,CACII,KAAM,WACNN,KAAM,eACNC,OAAQ,OACRC,cAAe,KAEnB,CACII,KAAM,WACNN,KAAM,eACNC,OAAQ,OACRC,cAAe,OAIFK,E,kDACjB,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDiB,MAAQ,CACTC,MAAOJ,GAHI,E,gEAOE,IAAD,QACL,IAAIK,KACMC,QAAQ,UACnBC,gBACLC,MAAK,SAAAD,GACF,IAAME,EAAgB,CAClBR,KAAM,SACNN,KAAM,6BACNC,OAAQ,SACRC,cAAeU,EAAcG,KAAKC,QAGtC,EAAKR,MAAMC,MAAM,GAAKK,EACtB,EAAKG,SAAS,CAACR,MAAO,EAAKD,MAAMC,a,+BAKzC,OACI,yBAAKd,UAAU,QACVD,KAAKc,MAAMC,MAAMS,KAAI,SAAAC,GAAI,OACtB,kBAAC,EAAD,CAAclB,OAAQkB,EAAKlB,OAC1BC,cAAeiB,EAAKjB,cACpBF,KAAMmB,EAAKnB,e,GA/BMG,IAAMC,W,QC5BvBgB,G,uLAEbC,SAASC,qBAAqB,QAAQ,GAAGC,UAAUC,OAAO,SAC1DH,SAASI,uBAAuB,WAAW,GAAGF,UAAUC,OAAO,SAFhD,oBAIKH,SAASI,uBAAuB,kBAJrC,IAIf,2BAAsE,SAC1DF,UAAUC,OAAO,UALd,iC,+BAUf,OACI,yBAAK7B,UAAU,oBACX,2BAAOA,UAAU,UACb,2BAAO+B,KAAK,WAAW9B,QAASF,KAAKiC,mBACrC,0BAAMhC,UAAU,iB,GAfKQ,IAAMC,Y,MCehCwB,MAdf,WACE,OACE,yBAAKjC,UAAU,aACb,yBAAKA,UAAU,WACb,sDACA,8BACA,uBAAGA,UAAU,mBAAb,sBACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCHckC,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.cf030937.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./css/detailed-card.css\"\n\nexport default class DetailedCard extends React.Component<any, any> {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props);\n\n        return (\n            <div className=\"detailed-card\" onClick={() => window.location.href = this.props.path}>\n                <div className=\"handle\">\n                    @{this.props.handle}\n                </div>\n                <div className=\"follower-count\">\n                    {this.props.followerCount}\n                </div>\n                <div className=\"follower-label\">\n                    FOLLOWERS\n                </div>\n                <div className=\"change\">\n                    +500 today\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport DetailedCard from \"./DetailedCard\";\nimport GitHub from 'github-api';\n\nimport \"./css/card-grid.css\"\n\nconst SAMPLE_CARDS = [\n    {\n        site: \"Facebook\",\n        path: \"facebook.com\",\n        handle: \"Test\",\n        followerCount: 100\n    },\n    {\n        site: \"Facebook\",\n        path: \"facebook.com\",\n        handle: \"Test\",\n        followerCount: 100\n    },\n    {\n        site: \"Facebook\",\n        path: \"facebook.com\",\n        handle: \"Test\",\n        followerCount: 100\n    },\n    {\n        site: \"Facebook\",\n        path: \"facebook.com\",\n        handle: \"Test\",\n        followerCount: 100\n    },\n]\n\nexport default class CardGrid extends React.Component<any, any> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cards: SAMPLE_CARDS\n        }\n    }\n\n    componentDidMount() {\n        const gh = new GitHub();\n        const myProfile = gh.getUser(\"V-Wong\");\n        myProfile.listFollowers()\n            .then(listFollowers => {\n                const gitHubDetails = {\n                    site: \"GitHub\",\n                    path: \"https://github.com/V-Wong/\",\n                    handle: \"V-Wong\",\n                    followerCount: listFollowers.data.length\n                }\n\n                this.state.cards[0] = gitHubDetails;\n                this.setState({cards: this.state.cards});\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"grid\">\n                {this.state.cards.map(card => (\n                    <DetailedCard handle={card.handle} \n                     followerCount={card.followerCount} \n                     path={card.path}\n                    />\n                ))}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport DetailedCard from \"./DetailedCard\";\n\nimport \"./css/theme-switch.css\"\n\nexport default class ThemeSwitch extends React.Component<any, any> {\n    toggleLightTheme() {\n        document.getElementsByTagName(\"body\")[0].classList.toggle(\"light\");\n        document.getElementsByClassName(\"top-bar\")[0].classList.toggle(\"light\");\n        \n        for (let element of document.getElementsByClassName(\"detailed-card\")) {\n            element.classList.toggle(\"light\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"switch-container\">\n                <label className=\"switch\">\n                    <input type=\"checkbox\" onClick={this.toggleLightTheme}/>\n                    <span className=\"slider\"></span>\n                </label>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport CardGrid from \"./components/CardGrid\";\nimport ThemeSwitch from \"./components/ThemeSwitch\";\n\nimport \"./app.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"top-bar\">\n        <h1>Social Media Dashboard</h1>\n        <div></div>\n        <p className=\"total-followers\">Total followers: 3</p>\n        <ThemeSwitch/>\n      </div>\n      <CardGrid/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}